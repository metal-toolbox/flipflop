// Code generated by mockery v2.42.1. DO NOT EDIT.

package model

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	redfish "github.com/stmcginnis/gofish/redfish"
)

// MockBMCBootMonitor is an autogenerated mock type for the BMCBootMonitor type
type MockBMCBootMonitor struct {
	mock.Mock
}

type MockBMCBootMonitor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBMCBootMonitor) EXPECT() *MockBMCBootMonitor_Expecter {
	return &MockBMCBootMonitor_Expecter{mock: &_m.Mock}
}

// BmcReset provides a mock function with given fields: _a0, _a1
func (_m *MockBMCBootMonitor) BmcReset(_a0 context.Context, _a1 string) (bool, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for BmcReset")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBMCBootMonitor_BmcReset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BmcReset'
type MockBMCBootMonitor_BmcReset_Call struct {
	*mock.Call
}

// BmcReset is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
func (_e *MockBMCBootMonitor_Expecter) BmcReset(_a0 interface{}, _a1 interface{}) *MockBMCBootMonitor_BmcReset_Call {
	return &MockBMCBootMonitor_BmcReset_Call{Call: _e.mock.On("BmcReset", _a0, _a1)}
}

func (_c *MockBMCBootMonitor_BmcReset_Call) Run(run func(_a0 context.Context, _a1 string)) *MockBMCBootMonitor_BmcReset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockBMCBootMonitor_BmcReset_Call) Return(_a0 bool, _a1 error) *MockBMCBootMonitor_BmcReset_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBMCBootMonitor_BmcReset_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *MockBMCBootMonitor_BmcReset_Call {
	_c.Call.Return(run)
	return _c
}

// BootComplete provides a mock function with given fields:
func (_m *MockBMCBootMonitor) BootComplete() (bool, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for BootComplete")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func() (bool, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBMCBootMonitor_BootComplete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BootComplete'
type MockBMCBootMonitor_BootComplete_Call struct {
	*mock.Call
}

// BootComplete is a helper method to define mock.On call
func (_e *MockBMCBootMonitor_Expecter) BootComplete() *MockBMCBootMonitor_BootComplete_Call {
	return &MockBMCBootMonitor_BootComplete_Call{Call: _e.mock.On("BootComplete")}
}

func (_c *MockBMCBootMonitor_BootComplete_Call) Run(run func()) *MockBMCBootMonitor_BootComplete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBMCBootMonitor_BootComplete_Call) Return(_a0 bool, _a1 error) *MockBMCBootMonitor_BootComplete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBMCBootMonitor_BootComplete_Call) RunAndReturn(run func() (bool, error)) *MockBMCBootMonitor_BootComplete_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function with given fields: _a0
func (_m *MockBMCBootMonitor) Close(_a0 context.Context) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBMCBootMonitor_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockBMCBootMonitor_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *MockBMCBootMonitor_Expecter) Close(_a0 interface{}) *MockBMCBootMonitor_Close_Call {
	return &MockBMCBootMonitor_Close_Call{Call: _e.mock.On("Close", _a0)}
}

func (_c *MockBMCBootMonitor_Close_Call) Run(run func(_a0 context.Context)) *MockBMCBootMonitor_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockBMCBootMonitor_Close_Call) Return(_a0 error) *MockBMCBootMonitor_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBMCBootMonitor_Close_Call) RunAndReturn(run func(context.Context) error) *MockBMCBootMonitor_Close_Call {
	_c.Call.Return(run)
	return _c
}

// GetBootProgress provides a mock function with given fields:
func (_m *MockBMCBootMonitor) GetBootProgress() (*redfish.BootProgress, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBootProgress")
	}

	var r0 *redfish.BootProgress
	var r1 error
	if rf, ok := ret.Get(0).(func() (*redfish.BootProgress, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *redfish.BootProgress); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redfish.BootProgress)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBMCBootMonitor_GetBootProgress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBootProgress'
type MockBMCBootMonitor_GetBootProgress_Call struct {
	*mock.Call
}

// GetBootProgress is a helper method to define mock.On call
func (_e *MockBMCBootMonitor_Expecter) GetBootProgress() *MockBMCBootMonitor_GetBootProgress_Call {
	return &MockBMCBootMonitor_GetBootProgress_Call{Call: _e.mock.On("GetBootProgress")}
}

func (_c *MockBMCBootMonitor_GetBootProgress_Call) Run(run func()) *MockBMCBootMonitor_GetBootProgress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBMCBootMonitor_GetBootProgress_Call) Return(_a0 *redfish.BootProgress, _a1 error) *MockBMCBootMonitor_GetBootProgress_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBMCBootMonitor_GetBootProgress_Call) RunAndReturn(run func() (*redfish.BootProgress, error)) *MockBMCBootMonitor_GetBootProgress_Call {
	_c.Call.Return(run)
	return _c
}

// Open provides a mock function with given fields: _a0
func (_m *MockBMCBootMonitor) Open(_a0 context.Context) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Open")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBMCBootMonitor_Open_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Open'
type MockBMCBootMonitor_Open_Call struct {
	*mock.Call
}

// Open is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *MockBMCBootMonitor_Expecter) Open(_a0 interface{}) *MockBMCBootMonitor_Open_Call {
	return &MockBMCBootMonitor_Open_Call{Call: _e.mock.On("Open", _a0)}
}

func (_c *MockBMCBootMonitor_Open_Call) Run(run func(_a0 context.Context)) *MockBMCBootMonitor_Open_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockBMCBootMonitor_Open_Call) Return(_a0 error) *MockBMCBootMonitor_Open_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBMCBootMonitor_Open_Call) RunAndReturn(run func(context.Context) error) *MockBMCBootMonitor_Open_Call {
	_c.Call.Return(run)
	return _c
}

// PowerSet provides a mock function with given fields: _a0, _a1
func (_m *MockBMCBootMonitor) PowerSet(_a0 context.Context, _a1 string) (bool, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for PowerSet")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBMCBootMonitor_PowerSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PowerSet'
type MockBMCBootMonitor_PowerSet_Call struct {
	*mock.Call
}

// PowerSet is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
func (_e *MockBMCBootMonitor_Expecter) PowerSet(_a0 interface{}, _a1 interface{}) *MockBMCBootMonitor_PowerSet_Call {
	return &MockBMCBootMonitor_PowerSet_Call{Call: _e.mock.On("PowerSet", _a0, _a1)}
}

func (_c *MockBMCBootMonitor_PowerSet_Call) Run(run func(_a0 context.Context, _a1 string)) *MockBMCBootMonitor_PowerSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockBMCBootMonitor_PowerSet_Call) Return(_a0 bool, _a1 error) *MockBMCBootMonitor_PowerSet_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBMCBootMonitor_PowerSet_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *MockBMCBootMonitor_PowerSet_Call {
	_c.Call.Return(run)
	return _c
}

// PowerStateGet provides a mock function with given fields: _a0
func (_m *MockBMCBootMonitor) PowerStateGet(_a0 context.Context) (string, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for PowerStateGet")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (string, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBMCBootMonitor_PowerStateGet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PowerStateGet'
type MockBMCBootMonitor_PowerStateGet_Call struct {
	*mock.Call
}

// PowerStateGet is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *MockBMCBootMonitor_Expecter) PowerStateGet(_a0 interface{}) *MockBMCBootMonitor_PowerStateGet_Call {
	return &MockBMCBootMonitor_PowerStateGet_Call{Call: _e.mock.On("PowerStateGet", _a0)}
}

func (_c *MockBMCBootMonitor_PowerStateGet_Call) Run(run func(_a0 context.Context)) *MockBMCBootMonitor_PowerStateGet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockBMCBootMonitor_PowerStateGet_Call) Return(_a0 string, _a1 error) *MockBMCBootMonitor_PowerStateGet_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBMCBootMonitor_PowerStateGet_Call) RunAndReturn(run func(context.Context) (string, error)) *MockBMCBootMonitor_PowerStateGet_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBMCBootMonitor creates a new instance of MockBMCBootMonitor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBMCBootMonitor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBMCBootMonitor {
	mock := &MockBMCBootMonitor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
